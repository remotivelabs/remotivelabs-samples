// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_api.proto

#include "network_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignalId;
}  // namespace protobuf_common_2eproto
namespace protobuf_network_5fapi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Signal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignalIds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Signals;
}  // namespace protobuf_network_5fapi_2eproto
namespace base {
class SubscriberConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscriberConfig>
      _instance;
} _SubscriberConfig_default_instance_;
class SignalIdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalIds>
      _instance;
} _SignalIds_default_instance_;
class SignalsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signals>
      _instance;
} _Signals_default_instance_;
class PublisherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublisherConfig>
      _instance;
} _PublisherConfig_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
  ::google::protobuf::int64 integer_;
  double double__;
  bool arbitration_;
  bool empty_;
} _Signal_default_instance_;
}  // namespace base
namespace protobuf_network_5fapi_2eproto {
static void InitDefaultsSubscriberConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::base::_SubscriberConfig_default_instance_;
    new (ptr) ::base::SubscriberConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::base::SubscriberConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SubscriberConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubscriberConfig}, {
      &protobuf_common_2eproto::scc_info_ClientId.base,
      &protobuf_network_5fapi_2eproto::scc_info_SignalIds.base,}};

static void InitDefaultsSignalIds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::base::_SignalIds_default_instance_;
    new (ptr) ::base::SignalIds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::base::SignalIds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalIds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalIds}, {
      &protobuf_common_2eproto::scc_info_SignalId.base,}};

static void InitDefaultsSignals() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::base::_Signals_default_instance_;
    new (ptr) ::base::Signals();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::base::Signals::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Signals =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignals}, {
      &protobuf_network_5fapi_2eproto::scc_info_Signal.base,}};

static void InitDefaultsPublisherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::base::_PublisherConfig_default_instance_;
    new (ptr) ::base::PublisherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::base::PublisherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PublisherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPublisherConfig}, {
      &protobuf_network_5fapi_2eproto::scc_info_Signals.base,
      &protobuf_common_2eproto::scc_info_ClientId.base,}};

static void InitDefaultsSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::base::_Signal_default_instance_;
    new (ptr) ::base::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::base::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Signal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignal}, {
      &protobuf_common_2eproto::scc_info_SignalId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SubscriberConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalIds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signals.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublisherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SubscriberConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SubscriberConfig, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SubscriberConfig, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SubscriberConfig, onchange_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SignalIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::SignalIds, signalid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signals, signal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::PublisherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::PublisherConfig, signals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::PublisherConfig, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::PublisherConfig, frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, id_),
  offsetof(::base::SignalDefaultTypeInternal, integer_),
  offsetof(::base::SignalDefaultTypeInternal, double__),
  offsetof(::base::SignalDefaultTypeInternal, arbitration_),
  offsetof(::base::SignalDefaultTypeInternal, empty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::base::Signal, payload_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::base::SubscriberConfig)},
  { 8, -1, sizeof(::base::SignalIds)},
  { 14, -1, sizeof(::base::Signals)},
  { 20, -1, sizeof(::base::PublisherConfig)},
  { 28, -1, sizeof(::base::Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::base::_SubscriberConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::base::_SignalIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::base::_Signals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::base::_PublisherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::base::_Signal_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "network_api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021network_api.proto\022\004base\032\014common.proto\""
      "h\n\020SubscriberConfig\022 \n\010clientId\030\001 \001(\0132\016."
      "base.ClientId\022 \n\007signals\030\002 \001(\0132\017.base.Si"
      "gnalIds\022\020\n\010onChange\030\003 \001(\010\"-\n\tSignalIds\022 "
      "\n\010signalId\030\001 \003(\0132\016.base.SignalId\"\'\n\007Sign"
      "als\022\034\n\006signal\030\001 \003(\0132\014.base.Signal\"f\n\017Pub"
      "lisherConfig\022\036\n\007signals\030\001 \001(\0132\r.base.Sig"
      "nals\022 \n\010clientId\030\002 \001(\0132\016.base.ClientId\022\021"
      "\n\tfrequency\030\003 \001(\005\"\234\001\n\006Signal\022\032\n\002id\030\001 \001(\013"
      "2\016.base.SignalId\022\021\n\007integer\030\002 \001(\003H\000\022\020\n\006d"
      "ouble\030\003 \001(\001H\000\022\025\n\013arbitration\030\004 \001(\010H\000\022\017\n\005"
      "empty\030\006 \001(\010H\000\022\013\n\003raw\030\005 \001(\014\022\021\n\ttimestamp\030"
      "\007 \001(\003B\t\n\007payload2\272\001\n\016NetworkService\022\?\n\022S"
      "ubscribeToSignals\022\026.base.SubscriberConfi"
      "g\032\r.base.Signals\"\0000\001\0226\n\016PublishSignals\022\025"
      ".base.PublisherConfig\032\013.base.Empty\"\000\022/\n\013"
      "ReadSignals\022\017.base.SignalIds\032\r.base.Sign"
      "als\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network_api.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_network_5fapi_2eproto
namespace base {

// ===================================================================

void SubscriberConfig::InitAsDefaultInstance() {
  ::base::_SubscriberConfig_default_instance_._instance.get_mutable()->clientid_ = const_cast< ::base::ClientId*>(
      ::base::ClientId::internal_default_instance());
  ::base::_SubscriberConfig_default_instance_._instance.get_mutable()->signals_ = const_cast< ::base::SignalIds*>(
      ::base::SignalIds::internal_default_instance());
}
void SubscriberConfig::clear_clientid() {
  if (GetArenaNoVirtual() == NULL && clientid_ != NULL) {
    delete clientid_;
  }
  clientid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriberConfig::kClientIdFieldNumber;
const int SubscriberConfig::kSignalsFieldNumber;
const int SubscriberConfig::kOnChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriberConfig::SubscriberConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fapi_2eproto::scc_info_SubscriberConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.SubscriberConfig)
}
SubscriberConfig::SubscriberConfig(const SubscriberConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clientid()) {
    clientid_ = new ::base::ClientId(*from.clientid_);
  } else {
    clientid_ = NULL;
  }
  if (from.has_signals()) {
    signals_ = new ::base::SignalIds(*from.signals_);
  } else {
    signals_ = NULL;
  }
  onchange_ = from.onchange_;
  // @@protoc_insertion_point(copy_constructor:base.SubscriberConfig)
}

void SubscriberConfig::SharedCtor() {
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onchange_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(onchange_));
}

SubscriberConfig::~SubscriberConfig() {
  // @@protoc_insertion_point(destructor:base.SubscriberConfig)
  SharedDtor();
}

void SubscriberConfig::SharedDtor() {
  if (this != internal_default_instance()) delete clientid_;
  if (this != internal_default_instance()) delete signals_;
}

void SubscriberConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubscriberConfig::descriptor() {
  ::protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscriberConfig& SubscriberConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fapi_2eproto::scc_info_SubscriberConfig.base);
  return *internal_default_instance();
}


void SubscriberConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SubscriberConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && clientid_ != NULL) {
    delete clientid_;
  }
  clientid_ = NULL;
  if (GetArenaNoVirtual() == NULL && signals_ != NULL) {
    delete signals_;
  }
  signals_ = NULL;
  onchange_ = false;
  _internal_metadata_.Clear();
}

bool SubscriberConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.SubscriberConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .base.ClientId clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clientid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .base.SignalIds signals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool onChange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.SubscriberConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.SubscriberConfig)
  return false;
#undef DO_
}

void SubscriberConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.SubscriberConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.ClientId clientId = 1;
  if (this->has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clientid(), output);
  }

  // .base.SignalIds signals = 2;
  if (this->has_signals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_signals(), output);
  }

  // bool onChange = 3;
  if (this->onchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->onchange(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:base.SubscriberConfig)
}

::google::protobuf::uint8* SubscriberConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:base.SubscriberConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.ClientId clientId = 1;
  if (this->has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clientid(), deterministic, target);
  }

  // .base.SignalIds signals = 2;
  if (this->has_signals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_signals(), deterministic, target);
  }

  // bool onChange = 3;
  if (this->onchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->onchange(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SubscriberConfig)
  return target;
}

size_t SubscriberConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SubscriberConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .base.ClientId clientId = 1;
  if (this->has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clientid_);
  }

  // .base.SignalIds signals = 2;
  if (this->has_signals()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signals_);
  }

  // bool onChange = 3;
  if (this->onchange() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriberConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:base.SubscriberConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriberConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscriberConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:base.SubscriberConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:base.SubscriberConfig)
    MergeFrom(*source);
  }
}

void SubscriberConfig::MergeFrom(const SubscriberConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:base.SubscriberConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clientid()) {
    mutable_clientid()->::base::ClientId::MergeFrom(from.clientid());
  }
  if (from.has_signals()) {
    mutable_signals()->::base::SignalIds::MergeFrom(from.signals());
  }
  if (from.onchange() != 0) {
    set_onchange(from.onchange());
  }
}

void SubscriberConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:base.SubscriberConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberConfig::CopyFrom(const SubscriberConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SubscriberConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberConfig::IsInitialized() const {
  return true;
}

void SubscriberConfig::Swap(SubscriberConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriberConfig::InternalSwap(SubscriberConfig* other) {
  using std::swap;
  swap(clientid_, other->clientid_);
  swap(signals_, other->signals_);
  swap(onchange_, other->onchange_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscriberConfig::GetMetadata() const {
  protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalIds::InitAsDefaultInstance() {
}
void SignalIds::clear_signalid() {
  signalid_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalIds::kSignalIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalIds::SignalIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fapi_2eproto::scc_info_SignalIds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.SignalIds)
}
SignalIds::SignalIds(const SignalIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signalid_(from.signalid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.SignalIds)
}

void SignalIds::SharedCtor() {
}

SignalIds::~SignalIds() {
  // @@protoc_insertion_point(destructor:base.SignalIds)
  SharedDtor();
}

void SignalIds::SharedDtor() {
}

void SignalIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalIds::descriptor() {
  ::protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalIds& SignalIds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fapi_2eproto::scc_info_SignalIds.base);
  return *internal_default_instance();
}


void SignalIds::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SignalIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalid_.Clear();
  _internal_metadata_.Clear();
}

bool SignalIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.SignalIds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .base.SignalId signalId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signalid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.SignalIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.SignalIds)
  return false;
#undef DO_
}

void SignalIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.SignalIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.SignalId signalId = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signalid(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:base.SignalIds)
}

::google::protobuf::uint8* SignalIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:base.SignalIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.SignalId signalId = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signalid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SignalIds)
  return target;
}

size_t SignalIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SignalIds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .base.SignalId signalId = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signalid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signalid(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:base.SignalIds)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalIds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:base.SignalIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:base.SignalIds)
    MergeFrom(*source);
  }
}

void SignalIds::MergeFrom(const SignalIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:base.SignalIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalid_.MergeFrom(from.signalid_);
}

void SignalIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:base.SignalIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalIds::CopyFrom(const SignalIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SignalIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalIds::IsInitialized() const {
  return true;
}

void SignalIds::Swap(SignalIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalIds::InternalSwap(SignalIds* other) {
  using std::swap;
  CastToBase(&signalid_)->InternalSwap(CastToBase(&other->signalid_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalIds::GetMetadata() const {
  protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signals::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signals::Signals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fapi_2eproto::scc_info_Signals.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.Signals)
}
Signals::Signals(const Signals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.Signals)
}

void Signals::SharedCtor() {
}

Signals::~Signals() {
  // @@protoc_insertion_point(destructor:base.Signals)
  SharedDtor();
}

void Signals::SharedDtor() {
}

void Signals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signals::descriptor() {
  ::protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signals& Signals::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fapi_2eproto::scc_info_Signals.base);
  return *internal_default_instance();
}


void Signals::Clear() {
// @@protoc_insertion_point(message_clear_start:base.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_.Clear();
  _internal_metadata_.Clear();
}

bool Signals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.Signals)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .base.Signal signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.Signals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.Signals)
  return false;
#undef DO_
}

void Signals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.Signal signal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signal(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:base.Signals)
}

::google::protobuf::uint8* Signals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:base.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.Signal signal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signal(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.Signals)
  return target;
}

size_t Signals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.Signals)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .base.Signal signal = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:base.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  const Signals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:base.Signals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:base.Signals)
    MergeFrom(*source);
  }
}

void Signals::MergeFrom(const Signals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:base.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
}

void Signals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:base.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signals::CopyFrom(const Signals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signals::IsInitialized() const {
  return true;
}

void Signals::Swap(Signals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signals::InternalSwap(Signals* other) {
  using std::swap;
  CastToBase(&signal_)->InternalSwap(CastToBase(&other->signal_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signals::GetMetadata() const {
  protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublisherConfig::InitAsDefaultInstance() {
  ::base::_PublisherConfig_default_instance_._instance.get_mutable()->signals_ = const_cast< ::base::Signals*>(
      ::base::Signals::internal_default_instance());
  ::base::_PublisherConfig_default_instance_._instance.get_mutable()->clientid_ = const_cast< ::base::ClientId*>(
      ::base::ClientId::internal_default_instance());
}
void PublisherConfig::clear_clientid() {
  if (GetArenaNoVirtual() == NULL && clientid_ != NULL) {
    delete clientid_;
  }
  clientid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublisherConfig::kSignalsFieldNumber;
const int PublisherConfig::kClientIdFieldNumber;
const int PublisherConfig::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublisherConfig::PublisherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fapi_2eproto::scc_info_PublisherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.PublisherConfig)
}
PublisherConfig::PublisherConfig(const PublisherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signals()) {
    signals_ = new ::base::Signals(*from.signals_);
  } else {
    signals_ = NULL;
  }
  if (from.has_clientid()) {
    clientid_ = new ::base::ClientId(*from.clientid_);
  } else {
    clientid_ = NULL;
  }
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:base.PublisherConfig)
}

void PublisherConfig::SharedCtor() {
  ::memset(&signals_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&signals_)) + sizeof(frequency_));
}

PublisherConfig::~PublisherConfig() {
  // @@protoc_insertion_point(destructor:base.PublisherConfig)
  SharedDtor();
}

void PublisherConfig::SharedDtor() {
  if (this != internal_default_instance()) delete signals_;
  if (this != internal_default_instance()) delete clientid_;
}

void PublisherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublisherConfig::descriptor() {
  ::protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublisherConfig& PublisherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fapi_2eproto::scc_info_PublisherConfig.base);
  return *internal_default_instance();
}


void PublisherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:base.PublisherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && signals_ != NULL) {
    delete signals_;
  }
  signals_ = NULL;
  if (GetArenaNoVirtual() == NULL && clientid_ != NULL) {
    delete clientid_;
  }
  clientid_ = NULL;
  frequency_ = 0;
  _internal_metadata_.Clear();
}

bool PublisherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.PublisherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .base.Signals signals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .base.ClientId clientId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clientid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.PublisherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.PublisherConfig)
  return false;
#undef DO_
}

void PublisherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.PublisherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.Signals signals = 1;
  if (this->has_signals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_signals(), output);
  }

  // .base.ClientId clientId = 2;
  if (this->has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_clientid(), output);
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frequency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:base.PublisherConfig)
}

::google::protobuf::uint8* PublisherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:base.PublisherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.Signals signals = 1;
  if (this->has_signals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_signals(), deterministic, target);
  }

  // .base.ClientId clientId = 2;
  if (this->has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_clientid(), deterministic, target);
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frequency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PublisherConfig)
  return target;
}

size_t PublisherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.PublisherConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .base.Signals signals = 1;
  if (this->has_signals()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signals_);
  }

  // .base.ClientId clientId = 2;
  if (this->has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clientid_);
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublisherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:base.PublisherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PublisherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublisherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:base.PublisherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:base.PublisherConfig)
    MergeFrom(*source);
  }
}

void PublisherConfig::MergeFrom(const PublisherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:base.PublisherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signals()) {
    mutable_signals()->::base::Signals::MergeFrom(from.signals());
  }
  if (from.has_clientid()) {
    mutable_clientid()->::base::ClientId::MergeFrom(from.clientid());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void PublisherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:base.PublisherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublisherConfig::CopyFrom(const PublisherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.PublisherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublisherConfig::IsInitialized() const {
  return true;
}

void PublisherConfig::Swap(PublisherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublisherConfig::InternalSwap(PublisherConfig* other) {
  using std::swap;
  swap(signals_, other->signals_);
  swap(clientid_, other->clientid_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublisherConfig::GetMetadata() const {
  protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::base::_Signal_default_instance_._instance.get_mutable()->id_ = const_cast< ::base::SignalId*>(
      ::base::SignalId::internal_default_instance());
  ::base::_Signal_default_instance_.integer_ = GOOGLE_LONGLONG(0);
  ::base::_Signal_default_instance_.double__ = 0;
  ::base::_Signal_default_instance_.arbitration_ = false;
  ::base::_Signal_default_instance_.empty_ = false;
}
void Signal::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kIntegerFieldNumber;
const int Signal::kDoubleFieldNumber;
const int Signal::kArbitrationFieldNumber;
const int Signal::kEmptyFieldNumber;
const int Signal::kRawFieldNumber;
const int Signal::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fapi_2eproto::scc_info_Signal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.has_id()) {
    id_ = new ::base::SignalId(*from.id_);
  } else {
    id_ = NULL;
  }
  timestamp_ = from.timestamp_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kDouble: {
      set_double_(from.double_());
      break;
    }
    case kArbitration: {
      set_arbitration(from.arbitration());
      break;
    }
    case kEmpty: {
      set_empty(from.empty());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:base.Signal)
}

void Signal::SharedCtor() {
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  clear_has_payload();
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:base.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (has_payload()) {
    clear_payload();
  }
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fapi_2eproto::scc_info_Signal.base);
  return *internal_default_instance();
}


void Signal::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:base.Signal)
  switch (payload_case()) {
    case kInteger: {
      // No need to clear
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kArbitration: {
      // No need to clear
      break;
    }
    case kEmpty: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:base.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_payload();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .base.SignalId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 integer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_.integer_)));
          set_has_integer();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &payload_.double__)));
          set_has_double_();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool arbitration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payload_.arbitration_)));
          set_has_arbitration();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool empty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payload_.empty_)));
          set_has_empty();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.SignalId id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // int64 integer = 2;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->integer(), output);
  }

  // double double = 3;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_(), output);
  }

  // bool arbitration = 4;
  if (has_arbitration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->arbitration(), output);
  }

  // bytes raw = 5;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->raw(), output);
  }

  // bool empty = 6;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->empty(), output);
  }

  // int64 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:base.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:base.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .base.SignalId id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // int64 integer = 2;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->integer(), target);
  }

  // double double = 3;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_(), target);
  }

  // bool arbitration = 4;
  if (has_arbitration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->arbitration(), target);
  }

  // bytes raw = 5;
  if (this->raw().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->raw(), target);
  }

  // bool empty = 6;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->empty(), target);
  }

  // int64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes raw = 5;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw());
  }

  // .base.SignalId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  switch (payload_case()) {
    // int64 integer = 2;
    case kInteger: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer());
      break;
    }
    // double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool arbitration = 4;
    case kArbitration: {
      total_size += 1 + 1;
      break;
    }
    // bool empty = 6;
    case kEmpty: {
      total_size += 1 + 1;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:base.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:base.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:base.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:base.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.has_id()) {
    mutable_id()->::base::SignalId::MergeFrom(from.id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.payload_case()) {
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kDouble: {
      set_double_(from.double_());
      break;
    }
    case kArbitration: {
      set_arbitration(from.arbitration());
      break;
    }
    case kEmpty: {
      set_empty(from.empty());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:base.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(timestamp_, other->timestamp_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_network_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace base
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::base::SubscriberConfig* Arena::CreateMaybeMessage< ::base::SubscriberConfig >(Arena* arena) {
  return Arena::CreateInternal< ::base::SubscriberConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::base::SignalIds* Arena::CreateMaybeMessage< ::base::SignalIds >(Arena* arena) {
  return Arena::CreateInternal< ::base::SignalIds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::base::Signals* Arena::CreateMaybeMessage< ::base::Signals >(Arena* arena) {
  return Arena::CreateInternal< ::base::Signals >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::base::PublisherConfig* Arena::CreateMaybeMessage< ::base::PublisherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::base::PublisherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::base::Signal* Arena::CreateMaybeMessage< ::base::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::base::Signal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
