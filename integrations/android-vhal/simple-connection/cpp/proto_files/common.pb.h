// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace base {
class ClientId;
class ClientIdDefaultTypeInternal;
extern ClientIdDefaultTypeInternal _ClientId_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class Frames;
class FramesDefaultTypeInternal;
extern FramesDefaultTypeInternal _Frames_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class NameSpace;
class NameSpaceDefaultTypeInternal;
extern NameSpaceDefaultTypeInternal _NameSpace_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class SignalId;
class SignalIdDefaultTypeInternal;
extern SignalIdDefaultTypeInternal _SignalId_default_instance_;
class SignalInfo;
class SignalInfoDefaultTypeInternal;
extern SignalInfoDefaultTypeInternal _SignalInfo_default_instance_;
}  // namespace base
namespace google {
namespace protobuf {
template<> ::base::ClientId* Arena::CreateMaybeMessage<::base::ClientId>(Arena*);
template<> ::base::Configuration* Arena::CreateMaybeMessage<::base::Configuration>(Arena*);
template<> ::base::Empty* Arena::CreateMaybeMessage<::base::Empty>(Arena*);
template<> ::base::FrameInfo* Arena::CreateMaybeMessage<::base::FrameInfo>(Arena*);
template<> ::base::Frames* Arena::CreateMaybeMessage<::base::Frames>(Arena*);
template<> ::base::MetaData* Arena::CreateMaybeMessage<::base::MetaData>(Arena*);
template<> ::base::NameSpace* Arena::CreateMaybeMessage<::base::NameSpace>(Arena*);
template<> ::base::NetworkInfo* Arena::CreateMaybeMessage<::base::NetworkInfo>(Arena*);
template<> ::base::SignalId* Arena::CreateMaybeMessage<::base::SignalId>(Arena*);
template<> ::base::SignalInfo* Arena::CreateMaybeMessage<::base::SignalInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace base {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.ClientId) */ {
 public:
  ClientId();
  virtual ~ClientId();

  ClientId(const ClientId& from);

  inline ClientId& operator=(const ClientId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientId(ClientId&& from) noexcept
    : ClientId() {
    *this = ::std::move(from);
  }

  inline ClientId& operator=(ClientId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientId* internal_default_instance() {
    return reinterpret_cast<const ClientId*>(
               &_ClientId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientId* other);
  friend void swap(ClientId& a, ClientId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientId* New() const final {
    return CreateMaybeMessage<ClientId>(NULL);
  }

  ClientId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientId& from);
  void MergeFrom(const ClientId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:base.ClientId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.SignalId) */ {
 public:
  SignalId();
  virtual ~SignalId();

  SignalId(const SignalId& from);

  inline SignalId& operator=(const SignalId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalId(SignalId&& from) noexcept
    : SignalId() {
    *this = ::std::move(from);
  }

  inline SignalId& operator=(SignalId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalId* internal_default_instance() {
    return reinterpret_cast<const SignalId*>(
               &_SignalId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignalId* other);
  friend void swap(SignalId& a, SignalId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalId* New() const final {
    return CreateMaybeMessage<SignalId>(NULL);
  }

  SignalId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalId& from);
  void MergeFrom(const SignalId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .base.NameSpace namespace = 2;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  private:
  const ::base::NameSpace& _internal_namespace_() const;
  public:
  const ::base::NameSpace& namespace_() const;
  ::base::NameSpace* release_namespace_();
  ::base::NameSpace* mutable_namespace_();
  void set_allocated_namespace_(::base::NameSpace* namespace_);

  // @@protoc_insertion_point(class_scope:base.SignalId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::base::NameSpace* namespace__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.SignalInfo) */ {
 public:
  SignalInfo();
  virtual ~SignalInfo();

  SignalInfo(const SignalInfo& from);

  inline SignalInfo& operator=(const SignalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalInfo(SignalInfo&& from) noexcept
    : SignalInfo() {
    *this = ::std::move(from);
  }

  inline SignalInfo& operator=(SignalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalInfo* internal_default_instance() {
    return reinterpret_cast<const SignalInfo*>(
               &_SignalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SignalInfo* other);
  friend void swap(SignalInfo& a, SignalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalInfo* New() const final {
    return CreateMaybeMessage<SignalInfo>(NULL);
  }

  SignalInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalInfo& from);
  void MergeFrom(const SignalInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .base.SignalId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::base::SignalId& _internal_id() const;
  public:
  const ::base::SignalId& id() const;
  ::base::SignalId* release_id();
  ::base::SignalId* mutable_id();
  void set_allocated_id(::base::SignalId* id);

  // .base.MetaData metaData = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetaDataFieldNumber = 2;
  private:
  const ::base::MetaData& _internal_metadata() const;
  public:
  const ::base::MetaData& metadata() const;
  ::base::MetaData* release_metadata();
  ::base::MetaData* mutable_metadata();
  void set_allocated_metadata(::base::MetaData* metadata);

  // @@protoc_insertion_point(class_scope:base.SignalInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::base::SignalId* id_;
  ::base::MetaData* metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MetaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MetaData* other);
  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(NULL);
  }

  MetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string unit = 7;
  void clear_unit();
  static const int kUnitFieldNumber = 7;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // int32 max = 5;
  void clear_max();
  static const int kMaxFieldNumber = 5;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // int32 min = 6;
  void clear_min();
  static const int kMinFieldNumber = 6;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // int32 size = 8;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // bool isRaw = 9;
  void clear_israw();
  static const int kIsRawFieldNumber = 9;
  bool israw() const;
  void set_israw(bool value);

  // @@protoc_insertion_point(class_scope:base.MetaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::int32 max_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 size_;
  bool israw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NameSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.NameSpace) */ {
 public:
  NameSpace();
  virtual ~NameSpace();

  NameSpace(const NameSpace& from);

  inline NameSpace& operator=(const NameSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameSpace(NameSpace&& from) noexcept
    : NameSpace() {
    *this = ::std::move(from);
  }

  inline NameSpace& operator=(NameSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameSpace* internal_default_instance() {
    return reinterpret_cast<const NameSpace*>(
               &_NameSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NameSpace* other);
  friend void swap(NameSpace& a, NameSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameSpace* New() const final {
    return CreateMaybeMessage<NameSpace>(NULL);
  }

  NameSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameSpace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameSpace& from);
  void MergeFrom(const NameSpace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:base.NameSpace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Configuration* other);
  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(NULL);
  }

  Configuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .base.NetworkInfo networkInfo = 1;
  int networkinfo_size() const;
  void clear_networkinfo();
  static const int kNetworkInfoFieldNumber = 1;
  ::base::NetworkInfo* mutable_networkinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::base::NetworkInfo >*
      mutable_networkinfo();
  const ::base::NetworkInfo& networkinfo(int index) const;
  ::base::NetworkInfo* add_networkinfo();
  const ::google::protobuf::RepeatedPtrField< ::base::NetworkInfo >&
      networkinfo() const;

  // @@protoc_insertion_point(class_scope:base.Configuration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::base::NetworkInfo > networkinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NetworkInfo* other);
  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(NULL);
  }

  NetworkInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .base.NameSpace namespace = 1;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  private:
  const ::base::NameSpace& _internal_namespace_() const;
  public:
  const ::base::NameSpace& namespace_() const;
  ::base::NameSpace* release_namespace_();
  ::base::NameSpace* mutable_namespace_();
  void set_allocated_namespace_(::base::NameSpace* namespace_);

  // @@protoc_insertion_point(class_scope:base.NetworkInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::base::NameSpace* namespace__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.FrameInfo) */ {
 public:
  FrameInfo();
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FrameInfo* other);
  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const final {
    return CreateMaybeMessage<FrameInfo>(NULL);
  }

  FrameInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .base.SignalInfo childInfo = 2;
  int childinfo_size() const;
  void clear_childinfo();
  static const int kChildInfoFieldNumber = 2;
  ::base::SignalInfo* mutable_childinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::base::SignalInfo >*
      mutable_childinfo();
  const ::base::SignalInfo& childinfo(int index) const;
  ::base::SignalInfo* add_childinfo();
  const ::google::protobuf::RepeatedPtrField< ::base::SignalInfo >&
      childinfo() const;

  // .base.SignalInfo signalInfo = 1;
  bool has_signalinfo() const;
  void clear_signalinfo();
  static const int kSignalInfoFieldNumber = 1;
  private:
  const ::base::SignalInfo& _internal_signalinfo() const;
  public:
  const ::base::SignalInfo& signalinfo() const;
  ::base::SignalInfo* release_signalinfo();
  ::base::SignalInfo* mutable_signalinfo();
  void set_allocated_signalinfo(::base::SignalInfo* signalinfo);

  // @@protoc_insertion_point(class_scope:base.FrameInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::base::SignalInfo > childinfo_;
  ::base::SignalInfo* signalinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:base.Frames) */ {
 public:
  Frames();
  virtual ~Frames();

  Frames(const Frames& from);

  inline Frames& operator=(const Frames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frames(Frames&& from) noexcept
    : Frames() {
    *this = ::std::move(from);
  }

  inline Frames& operator=(Frames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frames* internal_default_instance() {
    return reinterpret_cast<const Frames*>(
               &_Frames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Frames* other);
  friend void swap(Frames& a, Frames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frames* New() const final {
    return CreateMaybeMessage<Frames>(NULL);
  }

  Frames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frames& from);
  void MergeFrom(const Frames& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .base.FrameInfo frame = 1;
  int frame_size() const;
  void clear_frame();
  static const int kFrameFieldNumber = 1;
  ::base::FrameInfo* mutable_frame(int index);
  ::google::protobuf::RepeatedPtrField< ::base::FrameInfo >*
      mutable_frame();
  const ::base::FrameInfo& frame(int index) const;
  ::base::FrameInfo* add_frame();
  const ::google::protobuf::RepeatedPtrField< ::base::FrameInfo >&
      frame() const;

  // @@protoc_insertion_point(class_scope:base.Frames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::base::FrameInfo > frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// ClientId

// string id = 1;
inline void ClientId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientId::id() const {
  // @@protoc_insertion_point(field_get:base.ClientId.id)
  return id_.GetNoArena();
}
inline void ClientId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.ClientId.id)
}
#if LANG_CXX11
inline void ClientId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.ClientId.id)
}
#endif
inline void ClientId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.ClientId.id)
}
inline void ClientId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.ClientId.id)
}
inline ::std::string* ClientId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:base.ClientId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientId::release_id() {
  // @@protoc_insertion_point(field_release:base.ClientId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:base.ClientId.id)
}

// -------------------------------------------------------------------

// SignalId

// string name = 1;
inline void SignalId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalId::name() const {
  // @@protoc_insertion_point(field_get:base.SignalId.name)
  return name_.GetNoArena();
}
inline void SignalId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.SignalId.name)
}
#if LANG_CXX11
inline void SignalId::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.SignalId.name)
}
#endif
inline void SignalId::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.SignalId.name)
}
inline void SignalId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.SignalId.name)
}
inline ::std::string* SignalId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:base.SignalId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalId::release_name() {
  // @@protoc_insertion_point(field_release:base.SignalId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalId::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:base.SignalId.name)
}

// .base.NameSpace namespace = 2;
inline bool SignalId::has_namespace_() const {
  return this != internal_default_instance() && namespace__ != NULL;
}
inline void SignalId::clear_namespace_() {
  if (GetArenaNoVirtual() == NULL && namespace__ != NULL) {
    delete namespace__;
  }
  namespace__ = NULL;
}
inline const ::base::NameSpace& SignalId::_internal_namespace_() const {
  return *namespace__;
}
inline const ::base::NameSpace& SignalId::namespace_() const {
  const ::base::NameSpace* p = namespace__;
  // @@protoc_insertion_point(field_get:base.SignalId.namespace)
  return p != NULL ? *p : *reinterpret_cast<const ::base::NameSpace*>(
      &::base::_NameSpace_default_instance_);
}
inline ::base::NameSpace* SignalId::release_namespace_() {
  // @@protoc_insertion_point(field_release:base.SignalId.namespace)
  
  ::base::NameSpace* temp = namespace__;
  namespace__ = NULL;
  return temp;
}
inline ::base::NameSpace* SignalId::mutable_namespace_() {
  
  if (namespace__ == NULL) {
    auto* p = CreateMaybeMessage<::base::NameSpace>(GetArenaNoVirtual());
    namespace__ = p;
  }
  // @@protoc_insertion_point(field_mutable:base.SignalId.namespace)
  return namespace__;
}
inline void SignalId::set_allocated_namespace_(::base::NameSpace* namespace_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace__;
  }
  if (namespace_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:base.SignalId.namespace)
}

// -------------------------------------------------------------------

// SignalInfo

// .base.SignalId id = 1;
inline bool SignalInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void SignalInfo::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::base::SignalId& SignalInfo::_internal_id() const {
  return *id_;
}
inline const ::base::SignalId& SignalInfo::id() const {
  const ::base::SignalId* p = id_;
  // @@protoc_insertion_point(field_get:base.SignalInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::base::SignalId*>(
      &::base::_SignalId_default_instance_);
}
inline ::base::SignalId* SignalInfo::release_id() {
  // @@protoc_insertion_point(field_release:base.SignalInfo.id)
  
  ::base::SignalId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::base::SignalId* SignalInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::base::SignalId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:base.SignalInfo.id)
  return id_;
}
inline void SignalInfo::set_allocated_id(::base::SignalId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:base.SignalInfo.id)
}

// .base.MetaData metaData = 2;
inline bool SignalInfo::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void SignalInfo::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
inline const ::base::MetaData& SignalInfo::_internal_metadata() const {
  return *metadata_;
}
inline const ::base::MetaData& SignalInfo::metadata() const {
  const ::base::MetaData* p = metadata_;
  // @@protoc_insertion_point(field_get:base.SignalInfo.metaData)
  return p != NULL ? *p : *reinterpret_cast<const ::base::MetaData*>(
      &::base::_MetaData_default_instance_);
}
inline ::base::MetaData* SignalInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:base.SignalInfo.metaData)
  
  ::base::MetaData* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::base::MetaData* SignalInfo::mutable_metadata() {
  
  if (metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::base::MetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:base.SignalInfo.metaData)
  return metadata_;
}
inline void SignalInfo::set_allocated_metadata(::base::MetaData* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:base.SignalInfo.metaData)
}

// -------------------------------------------------------------------

// MetaData

// string description = 4;
inline void MetaData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::description() const {
  // @@protoc_insertion_point(field_get:base.MetaData.description)
  return description_.GetNoArena();
}
inline void MetaData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.MetaData.description)
}
#if LANG_CXX11
inline void MetaData::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.MetaData.description)
}
#endif
inline void MetaData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.MetaData.description)
}
inline void MetaData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.MetaData.description)
}
inline ::std::string* MetaData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:base.MetaData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_description() {
  // @@protoc_insertion_point(field_release:base.MetaData.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:base.MetaData.description)
}

// int32 max = 5;
inline void MetaData::clear_max() {
  max_ = 0;
}
inline ::google::protobuf::int32 MetaData::max() const {
  // @@protoc_insertion_point(field_get:base.MetaData.max)
  return max_;
}
inline void MetaData::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:base.MetaData.max)
}

// int32 min = 6;
inline void MetaData::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 MetaData::min() const {
  // @@protoc_insertion_point(field_get:base.MetaData.min)
  return min_;
}
inline void MetaData::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:base.MetaData.min)
}

// string unit = 7;
inline void MetaData::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::unit() const {
  // @@protoc_insertion_point(field_get:base.MetaData.unit)
  return unit_.GetNoArena();
}
inline void MetaData::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.MetaData.unit)
}
#if LANG_CXX11
inline void MetaData::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.MetaData.unit)
}
#endif
inline void MetaData::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.MetaData.unit)
}
inline void MetaData::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.MetaData.unit)
}
inline ::std::string* MetaData::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:base.MetaData.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_unit() {
  // @@protoc_insertion_point(field_release:base.MetaData.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:base.MetaData.unit)
}

// int32 size = 8;
inline void MetaData::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 MetaData::size() const {
  // @@protoc_insertion_point(field_get:base.MetaData.size)
  return size_;
}
inline void MetaData::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:base.MetaData.size)
}

// bool isRaw = 9;
inline void MetaData::clear_israw() {
  israw_ = false;
}
inline bool MetaData::israw() const {
  // @@protoc_insertion_point(field_get:base.MetaData.isRaw)
  return israw_;
}
inline void MetaData::set_israw(bool value) {
  
  israw_ = value;
  // @@protoc_insertion_point(field_set:base.MetaData.isRaw)
}

// -------------------------------------------------------------------

// NameSpace

// string name = 1;
inline void NameSpace::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NameSpace::name() const {
  // @@protoc_insertion_point(field_get:base.NameSpace.name)
  return name_.GetNoArena();
}
inline void NameSpace::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.NameSpace.name)
}
#if LANG_CXX11
inline void NameSpace::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.NameSpace.name)
}
#endif
inline void NameSpace::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.NameSpace.name)
}
inline void NameSpace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.NameSpace.name)
}
inline ::std::string* NameSpace::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:base.NameSpace.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameSpace::release_name() {
  // @@protoc_insertion_point(field_release:base.NameSpace.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameSpace::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:base.NameSpace.name)
}

// -------------------------------------------------------------------

// Configuration

// repeated .base.NetworkInfo networkInfo = 1;
inline int Configuration::networkinfo_size() const {
  return networkinfo_.size();
}
inline void Configuration::clear_networkinfo() {
  networkinfo_.Clear();
}
inline ::base::NetworkInfo* Configuration::mutable_networkinfo(int index) {
  // @@protoc_insertion_point(field_mutable:base.Configuration.networkInfo)
  return networkinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::base::NetworkInfo >*
Configuration::mutable_networkinfo() {
  // @@protoc_insertion_point(field_mutable_list:base.Configuration.networkInfo)
  return &networkinfo_;
}
inline const ::base::NetworkInfo& Configuration::networkinfo(int index) const {
  // @@protoc_insertion_point(field_get:base.Configuration.networkInfo)
  return networkinfo_.Get(index);
}
inline ::base::NetworkInfo* Configuration::add_networkinfo() {
  // @@protoc_insertion_point(field_add:base.Configuration.networkInfo)
  return networkinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::NetworkInfo >&
Configuration::networkinfo() const {
  // @@protoc_insertion_point(field_list:base.Configuration.networkInfo)
  return networkinfo_;
}

// -------------------------------------------------------------------

// NetworkInfo

// .base.NameSpace namespace = 1;
inline bool NetworkInfo::has_namespace_() const {
  return this != internal_default_instance() && namespace__ != NULL;
}
inline void NetworkInfo::clear_namespace_() {
  if (GetArenaNoVirtual() == NULL && namespace__ != NULL) {
    delete namespace__;
  }
  namespace__ = NULL;
}
inline const ::base::NameSpace& NetworkInfo::_internal_namespace_() const {
  return *namespace__;
}
inline const ::base::NameSpace& NetworkInfo::namespace_() const {
  const ::base::NameSpace* p = namespace__;
  // @@protoc_insertion_point(field_get:base.NetworkInfo.namespace)
  return p != NULL ? *p : *reinterpret_cast<const ::base::NameSpace*>(
      &::base::_NameSpace_default_instance_);
}
inline ::base::NameSpace* NetworkInfo::release_namespace_() {
  // @@protoc_insertion_point(field_release:base.NetworkInfo.namespace)
  
  ::base::NameSpace* temp = namespace__;
  namespace__ = NULL;
  return temp;
}
inline ::base::NameSpace* NetworkInfo::mutable_namespace_() {
  
  if (namespace__ == NULL) {
    auto* p = CreateMaybeMessage<::base::NameSpace>(GetArenaNoVirtual());
    namespace__ = p;
  }
  // @@protoc_insertion_point(field_mutable:base.NetworkInfo.namespace)
  return namespace__;
}
inline void NetworkInfo::set_allocated_namespace_(::base::NameSpace* namespace_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace__;
  }
  if (namespace_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_, submessage_arena);
    }
    
  } else {
    
  }
  namespace__ = namespace_;
  // @@protoc_insertion_point(field_set_allocated:base.NetworkInfo.namespace)
}

// string type = 2;
inline void NetworkInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::type() const {
  // @@protoc_insertion_point(field_get:base.NetworkInfo.type)
  return type_.GetNoArena();
}
inline void NetworkInfo::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.NetworkInfo.type)
}
#if LANG_CXX11
inline void NetworkInfo::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.NetworkInfo.type)
}
#endif
inline void NetworkInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.NetworkInfo.type)
}
inline void NetworkInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.NetworkInfo.type)
}
inline ::std::string* NetworkInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:base.NetworkInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_type() {
  // @@protoc_insertion_point(field_release:base.NetworkInfo.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:base.NetworkInfo.type)
}

// string description = 3;
inline void NetworkInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::description() const {
  // @@protoc_insertion_point(field_get:base.NetworkInfo.description)
  return description_.GetNoArena();
}
inline void NetworkInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:base.NetworkInfo.description)
}
#if LANG_CXX11
inline void NetworkInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:base.NetworkInfo.description)
}
#endif
inline void NetworkInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:base.NetworkInfo.description)
}
inline void NetworkInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:base.NetworkInfo.description)
}
inline ::std::string* NetworkInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:base.NetworkInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_description() {
  // @@protoc_insertion_point(field_release:base.NetworkInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:base.NetworkInfo.description)
}

// -------------------------------------------------------------------

// FrameInfo

// .base.SignalInfo signalInfo = 1;
inline bool FrameInfo::has_signalinfo() const {
  return this != internal_default_instance() && signalinfo_ != NULL;
}
inline void FrameInfo::clear_signalinfo() {
  if (GetArenaNoVirtual() == NULL && signalinfo_ != NULL) {
    delete signalinfo_;
  }
  signalinfo_ = NULL;
}
inline const ::base::SignalInfo& FrameInfo::_internal_signalinfo() const {
  return *signalinfo_;
}
inline const ::base::SignalInfo& FrameInfo::signalinfo() const {
  const ::base::SignalInfo* p = signalinfo_;
  // @@protoc_insertion_point(field_get:base.FrameInfo.signalInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::base::SignalInfo*>(
      &::base::_SignalInfo_default_instance_);
}
inline ::base::SignalInfo* FrameInfo::release_signalinfo() {
  // @@protoc_insertion_point(field_release:base.FrameInfo.signalInfo)
  
  ::base::SignalInfo* temp = signalinfo_;
  signalinfo_ = NULL;
  return temp;
}
inline ::base::SignalInfo* FrameInfo::mutable_signalinfo() {
  
  if (signalinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::base::SignalInfo>(GetArenaNoVirtual());
    signalinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:base.FrameInfo.signalInfo)
  return signalinfo_;
}
inline void FrameInfo::set_allocated_signalinfo(::base::SignalInfo* signalinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signalinfo_;
  }
  if (signalinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signalinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signalinfo, submessage_arena);
    }
    
  } else {
    
  }
  signalinfo_ = signalinfo;
  // @@protoc_insertion_point(field_set_allocated:base.FrameInfo.signalInfo)
}

// repeated .base.SignalInfo childInfo = 2;
inline int FrameInfo::childinfo_size() const {
  return childinfo_.size();
}
inline void FrameInfo::clear_childinfo() {
  childinfo_.Clear();
}
inline ::base::SignalInfo* FrameInfo::mutable_childinfo(int index) {
  // @@protoc_insertion_point(field_mutable:base.FrameInfo.childInfo)
  return childinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::base::SignalInfo >*
FrameInfo::mutable_childinfo() {
  // @@protoc_insertion_point(field_mutable_list:base.FrameInfo.childInfo)
  return &childinfo_;
}
inline const ::base::SignalInfo& FrameInfo::childinfo(int index) const {
  // @@protoc_insertion_point(field_get:base.FrameInfo.childInfo)
  return childinfo_.Get(index);
}
inline ::base::SignalInfo* FrameInfo::add_childinfo() {
  // @@protoc_insertion_point(field_add:base.FrameInfo.childInfo)
  return childinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::SignalInfo >&
FrameInfo::childinfo() const {
  // @@protoc_insertion_point(field_list:base.FrameInfo.childInfo)
  return childinfo_;
}

// -------------------------------------------------------------------

// Frames

// repeated .base.FrameInfo frame = 1;
inline int Frames::frame_size() const {
  return frame_.size();
}
inline void Frames::clear_frame() {
  frame_.Clear();
}
inline ::base::FrameInfo* Frames::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:base.Frames.frame)
  return frame_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::base::FrameInfo >*
Frames::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:base.Frames.frame)
  return &frame_;
}
inline const ::base::FrameInfo& Frames::frame(int index) const {
  // @@protoc_insertion_point(field_get:base.Frames.frame)
  return frame_.Get(index);
}
inline ::base::FrameInfo* Frames::add_frame() {
  // @@protoc_insertion_point(field_add:base.Frames.frame)
  return frame_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::FrameInfo >&
Frames::frame() const {
  // @@protoc_insertion_point(field_list:base.Frames.frame)
  return frame_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
