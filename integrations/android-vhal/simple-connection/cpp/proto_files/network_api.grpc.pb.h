// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network_api.proto
#ifndef GRPC_network_5fapi_2eproto__INCLUDED
#define GRPC_network_5fapi_2eproto__INCLUDED

#include "network_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace base {

class NetworkService final {
 public:
  static constexpr char const* service_full_name() {
    return "base.NetworkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::base::Signals>> SubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::base::Signals>>(SubscribeToSignalsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::base::Signals>> AsyncSubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::base::Signals>>(AsyncSubscribeToSignalsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::base::Signals>> PrepareAsyncSubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::base::Signals>>(PrepareAsyncSubscribeToSignalsRaw(context, request, cq));
    }
    virtual ::grpc::Status PublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::base::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>> AsyncPublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>>(AsyncPublishSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>> PrepareAsyncPublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>>(PrepareAsyncPublishSignalsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::base::Signals* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>> AsyncReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>>(AsyncReadSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>> PrepareAsyncReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>>(PrepareAsyncReadSignalsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void PublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig* request, ::base::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSignals(::grpc::ClientContext* context, const ::base::SignalIds* request, ::base::Signals* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::base::Signals>* SubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::base::Signals>* AsyncSubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::base::Signals>* PrepareAsyncSubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>* AsyncPublishSignalsRaw(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::base::Empty>* PrepareAsyncPublishSignalsRaw(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>* AsyncReadSignalsRaw(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::base::Signals>* PrepareAsyncReadSignalsRaw(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::base::Signals>> SubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::base::Signals>>(SubscribeToSignalsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::base::Signals>> AsyncSubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::base::Signals>>(AsyncSubscribeToSignalsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::base::Signals>> PrepareAsyncSubscribeToSignals(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::base::Signals>>(PrepareAsyncSubscribeToSignalsRaw(context, request, cq));
    }
    ::grpc::Status PublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::base::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Empty>> AsyncPublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Empty>>(AsyncPublishSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Empty>> PrepareAsyncPublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Empty>>(PrepareAsyncPublishSignalsRaw(context, request, cq));
    }
    ::grpc::Status ReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::base::Signals* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Signals>> AsyncReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Signals>>(AsyncReadSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Signals>> PrepareAsyncReadSignals(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::base::Signals>>(PrepareAsyncReadSignalsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PublishSignals(::grpc::ClientContext* context, const ::base::PublisherConfig* request, ::base::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReadSignals(::grpc::ClientContext* context, const ::base::SignalIds* request, ::base::Signals* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::base::Signals>* SubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request) override;
    ::grpc::ClientAsyncReader< ::base::Signals>* AsyncSubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::base::Signals>* PrepareAsyncSubscribeToSignalsRaw(::grpc::ClientContext* context, const ::base::SubscriberConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::base::Empty>* AsyncPublishSignalsRaw(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::base::Empty>* PrepareAsyncPublishSignalsRaw(::grpc::ClientContext* context, const ::base::PublisherConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::base::Signals>* AsyncReadSignalsRaw(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::base::Signals>* PrepareAsyncReadSignalsRaw(::grpc::ClientContext* context, const ::base::SignalIds& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToSignals_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishSignals_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSignals_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubscribeToSignals(::grpc::ServerContext* context, const ::base::SubscriberConfig* request, ::grpc::ServerWriter< ::base::Signals>* writer);
    virtual ::grpc::Status PublishSignals(::grpc::ServerContext* context, const ::base::PublisherConfig* request, ::base::Empty* response);
    virtual ::grpc::Status ReadSignals(::grpc::ServerContext* context, const ::base::SignalIds* request, ::base::Signals* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeToSignals() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeToSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToSignals(::grpc::ServerContext* context, const ::base::SubscriberConfig* request, ::grpc::ServerWriter< ::base::Signals>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToSignals(::grpc::ServerContext* context, ::base::SubscriberConfig* request, ::grpc::ServerAsyncWriter< ::base::Signals>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PublishSignals() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PublishSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishSignals(::grpc::ServerContext* context, const ::base::PublisherConfig* request, ::base::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishSignals(::grpc::ServerContext* context, ::base::PublisherConfig* request, ::grpc::ServerAsyncResponseWriter< ::base::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadSignals() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSignals(::grpc::ServerContext* context, const ::base::SignalIds* request, ::base::Signals* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSignals(::grpc::ServerContext* context, ::base::SignalIds* request, ::grpc::ServerAsyncResponseWriter< ::base::Signals>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeToSignals<WithAsyncMethod_PublishSignals<WithAsyncMethod_ReadSignals<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeToSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeToSignals() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeToSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToSignals(::grpc::ServerContext* context, const ::base::SubscriberConfig* request, ::grpc::ServerWriter< ::base::Signals>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PublishSignals() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PublishSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishSignals(::grpc::ServerContext* context, const ::base::PublisherConfig* request, ::base::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadSignals() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSignals(::grpc::ServerContext* context, const ::base::SignalIds* request, ::base::Signals* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeToSignals() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeToSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToSignals(::grpc::ServerContext* context, const ::base::SubscriberConfig* request, ::grpc::ServerWriter< ::base::Signals>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToSignals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PublishSignals() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PublishSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishSignals(::grpc::ServerContext* context, const ::base::PublisherConfig* request, ::base::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishSignals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadSignals() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSignals(::grpc::ServerContext* context, const ::base::SignalIds* request, ::base::Signals* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSignals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PublishSignals() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::base::PublisherConfig, ::base::Empty>(std::bind(&WithStreamedUnaryMethod_PublishSignals<BaseClass>::StreamedPublishSignals, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PublishSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishSignals(::grpc::ServerContext* context, const ::base::PublisherConfig* request, ::base::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishSignals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::base::PublisherConfig,::base::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadSignals() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::base::SignalIds, ::base::Signals>(std::bind(&WithStreamedUnaryMethod_ReadSignals<BaseClass>::StreamedReadSignals, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSignals(::grpc::ServerContext* context, const ::base::SignalIds* request, ::base::Signals* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSignals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::base::SignalIds,::base::Signals>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PublishSignals<WithStreamedUnaryMethod_ReadSignals<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeToSignals() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::base::SubscriberConfig, ::base::Signals>(std::bind(&WithSplitStreamingMethod_SubscribeToSignals<BaseClass>::StreamedSubscribeToSignals, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeToSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToSignals(::grpc::ServerContext* context, const ::base::SubscriberConfig* request, ::grpc::ServerWriter< ::base::Signals>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToSignals(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::base::SubscriberConfig,::base::Signals>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeToSignals<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeToSignals<WithStreamedUnaryMethod_PublishSignals<WithStreamedUnaryMethod_ReadSignals<Service > > > StreamedService;
};

}  // namespace base


#endif  // GRPC_network_5fapi_2eproto__INCLUDED
